name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install minification tools
        run: |
          npm install -g terser
          npm install -g clean-css-cli
          npm install -g html-minifier-terser
          
      - name: Replace Firebase Configuration
        run: |
          sed -i "s/FIREBASE_API_KEY_PLACEHOLDER/${{ secrets.FIREBASE_API_KEY }}/g" config.js
          sed -i "s/FIREBASE_AUTH_DOMAIN_PLACEHOLDER/${{ secrets.FIREBASE_AUTH_DOMAIN }}/g" config.js
          sed -i "s/FIREBASE_PROJECT_ID_PLACEHOLDER/${{ secrets.FIREBASE_PROJECT_ID }}/g" config.js
          sed -i "s/FIREBASE_STORAGE_BUCKET_PLACEHOLDER/${{ secrets.FIREBASE_STORAGE_BUCKET }}/g" config.js
          sed -i "s/FIREBASE_MESSAGING_SENDER_ID_PLACEHOLDER/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g" config.js
          sed -i "s/FIREBASE_APP_ID_PLACEHOLDER/${{ secrets.FIREBASE_APP_ID }}/g" config.js
          sed -i "s/FIREBASE_MEASUREMENT_ID_PLACEHOLDER/${{ secrets.FIREBASE_MEASUREMENT_ID }}/g" config.js
          sed -i "s/AUTHORIZED_ADMIN_EMAILS_PLACEHOLDER/${{ secrets.AUTHORIZED_ADMIN_EMAILS }}/g" config.js
          sed -i "s/AUTHORIZED_PHONE_NUMBERS_PLACEHOLDER/${{ secrets.AUTHORIZED_PHONE_NUMBERS }}/g" config.js

      - name: Minify JavaScript and CSS files
        run: |
          # Create minified versions (don't overwrite originals)
          terser scripts.js --compress drop_console=true,drop_debugger=true --mangle toplevel,reserved=[] --output scripts.min.js
          terser admin.js --compress drop_console=true,drop_debugger=true --mangle toplevel,reserved=[] --output admin.min.js
          terser config.js --compress drop_console=true,drop_debugger=true --mangle toplevel,reserved=[] --output config.min.js

          # Create minified CSS files
          cleancss styles.css --output styles.min.css
          cleancss admin-styles.css --output admin-styles.min.css

      - name: Minify HTML files and update references
        run: |
          # Update HTML files to use minified resources
          sed -i 's/scripts\.js/scripts.min.js/g' *.html
          sed -i 's/admin\.js/admin.min.js/g' *.html
          sed -i 's/config\.js/config.min.js/g' *.html
          sed -i 's/styles\.css/styles.min.css/g' *.html
          sed -i 's/admin-styles\.css/admin-styles.min.css/g' *.html
          
          # Minify HTML files in place
          html-minifier-terser --input-dir . --output-dir . --file-ext html \
            --remove-comments \
            --remove-script-type-attributes \
            --remove-tag-whitespace \
            --use-short-doctype \
            --collapse-whitespace \
            --minify-css false \
            --minify-js false \
            --process-conditional-comments \
            --sort-attributes \
            --sort-class-name
            
      - name: Verify minified files exist
        run: |
          echo "Checking for minified files..."
          ls -la *.min.js *.min.css
          echo "HTML references:"
          grep -E "\.(min\.)?(js|css)" *.html
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
